---
- name: install git
  apt: name=git-core state=latest

# PyBossa

- name: install Python
  apt: name={{item}} state=latest
  with_items:
    - python
    - python-dev
    - python-virtualenv
    - python-setuptools
    - python-pip

- name: install PyBossa build requirements
  apt: name={{item}} state=latest
  with_items:
    - build-essential
    - libjpeg-dev
    - libssl-dev
    - swig

- name: install DB binding libs
  apt: name={{item}} state=latest
  with_items:
    - libpq-dev
    - python-psycopg2

# pgbouncer

- name: install PostgreSQL client packages
  apt: name={{item}} state=latest
  with_items:
    - postgresql-client-9.3
    - postgresql-common
    - pgbouncer

# TODO: Set right IP in this template
- name: copy pgbouncer.ini
  template: src=pgbouncer.ini dest=/etc/pgbouncer/pgbouncer.ini owner=postgres group=postgres mode=640

- name: copy pgbouncer userlist
  template: src=userlist.txt dest=/etc/pgbouncer/userlist.txt owner=postgres group=postgres mode=640

- name: set pgbouncer to enabled
  lineinfile: dest=/etc/default/pgbouncer regexp=^START= line=START=1

- name: start pgbouncer
  service: name=pgbouncer state=started

# nginx

- name: install nginx
  apt: name=nginx state=latest

# https://www.howtoforge.com/using-geoip-with-nginx-on-ubuntu-12.04

- name: create geoip directory
  file: path=/etc/nginx/geoip owner=root group=root state=directory

- name: Get GeoIP.dat
  get_url:
    url=http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz
    dest=/etc/nginx/geoip/GeoIP.dat.gz

- name: Get GeoLiteCity.dat
  get_url:
    url=http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
    dest=/etc/nginx/geoip/GeoLiteCity.dat.gz

- name: Extract GeoIP.dat
  command: gzip -d -f GeoIP.dat.gz
  args:
    chdir: /etc/nginx/geoip
  notify: restart nginx

  # unarchive: src=/tmp/GeoIP.dat.gz dest=/etc/nginx/geoip copy=no

- name: Extract GeoLiteCity.dat
  command: gzip -d -f GeoLiteCity.dat.gz
  args:
    chdir: /etc/nginx/geoip
  notify: restart nginx

  # unarchive: src=/tmp/GeoLiteCity.dat.gz dest=/etc/nginx/geoip owner=root group=root copy=no

- name: set somaxconn for start up
  lineinfile:
    dest=/etc/sysctl.conf
    line="net.core.somaxconn = 2048"
    insertafter=EOF

- name: set somaxconn for session now
  command: sysctl -w net.core.somaxconn=2048

- name: start the nginx service
  service: name=nginx state=started

# supervisor

- name: install Supervisor
  apt: name=supervisor

- name: start Supervisor service
  service: name=supervisor state=started

# add pybossa user

- name: add pybossa group
  group: name={{pybossa_user}}

- name: add pybossa user
  user: name={{pybossa_user}} group={{pybossa_user}} shell=/bin/bash

- name: create .ssh directory
  file: name=/home/pybossa/.ssh owner={{pybossa_user}} group={{pybossa_user}} mode=700 state=directory

# TODO: Needed for crowdcrafting theme
# - name: copy pyroboto private key
#   copy: src=id_rsa dest=/home/{{pybossa_user}}/.ssh/id_rsa group={{pybossa_user}} owner={{pybossa_user}} mode=600

# TODO: Needed for crowdcrafting theme
# - name: add github known_hosts fingerprints globally (btw. without checking!)
#   shell: ssh-keyscan -H github.com >> /etc/ssh/ssh_known_hosts
#   args:
#     creates: /etc/ssh/ssh_known_hosts

# PyBossa itself

- name: git pull PyBossa master branch
  sudo_user: "{{pybossa_user}}"
  git: repo=https://github.com/PyBossa/pybossa.git
       dest=/home/{{pybossa_user}}/pybossa
       version=master

# TODO: Needed for crowdcrafting theme
# - name: git pull Crowdcrafting theme
#   sudo_user: "{{pybossa_user}}"
#   git: repo=ssh://git@github.com/PyBossa/crowdcrafting-theme.git
#        dest=/home/{{pybossa_user}}/pybossa/pybossa/themes/crowdcrafting-theme
#        version=master

- name: "upgrade pip itself"
  sudo_user: "{{pybossa_user}}"
  pip: name=pip state=latest chdir={{pybossa_path}} virtualenv={{virtualenv_path}} virtualenv_site_packages=no

- name: "install PyBossa virtualenv packages, can take some time..."
  sudo_user: "{{pybossa_user}}"
  pip: chdir={{pybossa_path}} requirements={{pybossa_path}}/requirements.txt virtualenv={{virtualenv_path}} virtualenv_site_packages=no

- name: install uwsgi
  sudo_user: "{{pybossa_user}}"
  pip: name=uwsgi chdir={{pybossa_path}} virtualenv={{virtualenv_path}} virtualenv_site_packages=no

- name: install newrelic
  sudo_user: "{{pybossa_user}}"
  pip: name=newrelic chdir={{pybossa_path}} virtualenv={{virtualenv_path}} virtualenv_site_packages=no

- name: create pybossa log directory
  file: path=/var/log/pybossa owner=pybossa group=pybossa state=directory


# TODO: temporary only

- name: check alembic.ini existing
  stat: path={{pybossa_path}}/alembic.ini
  register: check_alembic

- name: copy alembic template when not existing
  command: cp -p {{pybossa_path}}/alembic.ini.template {{pybossa_path}}/alembic.ini
  when: not check_alembic.stat.exists

- name: check settings_local.py existing
  stat: path={{pybossa_path}}/settings_local.py
  register: check_settings

- name: copy settings_local template when not existing
  command: cp -p {{pybossa_path}}/settings_local.py.tmpl {{pybossa_path}}/settings_local.py
  when: not check_settings.stat.exists

# RQ worker

- name: copy rq worker config
  template: src=rq-worker.conf dest=/etc/supervisor/conf.d/rq-worker.conf owner=root group=root
  notify: restart supervisor

# configure nginx

- name: copy nginx pybossa config
  copy: src=pybossa dest=/etc/nginx/sites-available/pybossa owner=root group=root
  notify: restart nginx

- name: remove default nginx config
  file: name=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx

- name: symlink nginx config
  file: src=/etc/nginx/sites-available/pybossa dest=/etc/nginx/sites-enabled/pybossa owner=root group=root state=link
  notify: restart nginx

- name: copy pybossa.ini for uwsgi
  copy: src=pybossa.ini dest=/home/pybossa/pybossa/pybossa.ini owner=pybossa group=pybossa

- name: copy newrelic.ini for uwsgi
  copy: src=newrelic.ini dest=/home/pybossa/pybossa/newrelic.ini owner=pybossa group=pybossa

# copy supervisor pybossa service

- name: copy supervisor pybossa.conf
  copy: src=pybossa.conf dest=/etc/supervisor/conf.d/pybossa.conf owner=root group=root
  notify: restart supervisor

# configure pybossa itself

- name: copy alembic.ini settings
  template: src=alembic.ini dest=/home/pybossa/pybossa/alembic.ini owner=pybossa group=pybossa

- name: copy settings_local.py settings
  template: src=settings_local.py dest=/home/pybossa/pybossa/settings_local.py owner=pybossa group=pybossa
  notify: restart supervisor

# upgrade database

# TODO: Needs to be done after database is live
# - name: upgrade database
#   sudo_user: "{{pybossa_user}}"
#   command: "{{virtualenv_path}}/bin/alembic upgrade head"
#   args:
#     chdir: "{{pybossa_path}}"
